# Routes
# This file defines all application routes (Higher priority routes first)
# ~~~~

# The landing page
GET     /                           controllers.HomeController.index(request: Request)
GET     /playIndex                  controllers.HomeController.playIndex()
GET     /securePlayIndex            controllers.HomeController.securePlayIndex()

# A controller for pages for an admin to create and maintain programs
GET     /admin/programs                                         controllers.admin.AdminProgramController.index(request: Request)
GET     /admin/programs/new                                     controllers.admin.AdminProgramController.newOne(request: Request)
GET     /admin/programs/:programId/edit                         controllers.admin.AdminProgramController.edit(request: Request, programId: Long)
POST    /admin/programs/:programId/newVersion                   controllers.admin.AdminProgramController.newVersionFrom(request: Request, programId: Long)
POST    /admin/programs                                         controllers.admin.AdminProgramController.create(request: Request)
POST    /admin/programs/publish                                 controllers.admin.AdminProgramController.publish()
POST    /admin/programs/:programId                              controllers.admin.AdminProgramController.update(request: Request, programId: Long)

# Routes for managing program localization
GET     /admin/programs/:programId/translations/:locale/edit    controllers.admin.AdminProgramTranslationsController.edit(request: Request, programId: Long, locale: String)
POST    /admin/programs/:programId/translations/:locale         controllers.admin.AdminProgramTranslationsController.update(request: Request, programId: Long, locale: String)

# A controller for versions for an admin to set older versions live.
GET     /admin/versions                       controllers.admin.AdminVersionController.index(request: Request)
POST    /admin/versions/:versionId/setLive    controllers.admin.AdminVersionController.setVersionLive(versionId: Long, request: Request)

# A controller for pages for an admin to create and maintain blocks for a program
GET     /admin/programs/:programId/blocks                              controllers.admin.AdminProgramBlocksController.index(programId: Long)
GET     /admin/programs/:programId/blocks/:blockDefinitionId/edit      controllers.admin.AdminProgramBlocksController.edit(request: Request, programId: Long, blockDefinitionId: Long)
POST    /admin/programs/:programId/blocks/:blockDefinitionId           controllers.admin.AdminProgramBlocksController.update(request: Request, programId: Long, blockDefinitionId: Long)
POST    /admin/programs/:programId/blocks                              controllers.admin.AdminProgramBlocksController.create(request: Request, programId: Long)
POST    /admin/programs/:programId/blocks/:blockDefinitionId/delete    controllers.admin.AdminProgramBlocksController.destroy(programId: Long, blockDefinitionId: Long)

# A controller for adding and removing questions from program blocks
POST    /admin/programs/:programId/blocks/:blockDefinitionId/questions               controllers.admin.AdminProgramBlockQuestionsController.create(request: Request, programId: Long, blockDefinitionId: Long)
POST    /admin/programs/:programId/blocks/:blockDefinitionId/questions/delete        controllers.admin.AdminProgramBlockQuestionsController.destroy(request: Request, programId: Long, blockDefinitionId: Long)

# A controller for a page for an admin to view, edit, and create questions
GET     /admin/questions             controllers.admin.QuestionController.index(request: Request)
# Should have a `type` query param, like: /admin/questions/new?type=name. Defaults to text.
GET     /admin/questions/new         controllers.admin.QuestionController.newOne(request: Request, type: String ?= "text")
GET     /admin/questions/:id/edit    controllers.admin.QuestionController.edit(request: Request, id: Long)
GET     /admin/questions/:id         controllers.admin.QuestionController.show(id: Long)
POST    /admin/questions/:id         controllers.admin.QuestionController.update(request: Request, id: Long, type: String)
POST    /admin/questions             controllers.admin.QuestionController.create(request: Request, type: String)

# Routes for editing question localizations
GET     /admin/questions/:id/translations/:locale/edit  controllers.admin.AdminQuestionTranslationsController.edit(request: Request, id: Long, locale: String)
POST    /admin/questions/:id/translations/:locale       controllers.admin.AdminQuestionTranslationsController.update(request: Request, id: Long, locale: String)

# Trusted Intermediary routes
GET     /admin/tiGroups                    controllers.admin.TrustedIntermediaryManagementController.index(request: Request)
POST    /admin/tiGroups/new                controllers.admin.TrustedIntermediaryManagementController.create(request: Request)
POST    /admin/tiGroups/:id/delete         controllers.admin.TrustedIntermediaryManagementController.delete(id: Long, request: Request)
GET     /admin/tiGroups/:id/edit           controllers.admin.TrustedIntermediaryManagementController.edit(id: Long, request: Request)
POST    /admin/tiGroups/:id/addTi          controllers.admin.TrustedIntermediaryManagementController.addIntermediary(id: Long, request: Request)
POST    /admin/tiGroups/:id/removeTi       controllers.admin.TrustedIntermediaryManagementController.removeIntermediary(id: Long, request: Request)

GET     /admin/tiDash                      controllers.ti.TrustedIntermediaryController.dashboard(request: Request)
POST    /admin/tiGroups/:id/addApplicant   controllers.ti.TrustedIntermediaryController.addApplicant(id: Long, request: Request)

# Controller for admins only, related to applications
GET     /admin/programs/:programId/applications                           controllers.admin.AdminApplicationController.answerList(programId: Long)
GET     /admin/programs/:programId/applications/all                       controllers.admin.AdminApplicationController.downloadAll(programId: Long)
GET     /admin/programs/:programId/applications/:applicationId            controllers.admin.AdminApplicationController.view(programId: Long, applicationId: Long)
GET     /admin/programs/:programId/applications/:applicationId/download   controllers.admin.AdminApplicationController.download(programId: Long, applicationId: Long)

GET     /demo/new                   controllers.J2HtmlDemoController.newOne(request: Request)
POST    /demo                       controllers.J2HtmlDemoController.create(request: Request)

# Map static resources from the /public folder to the /assets URL path
GET     /assets/*file               controllers.Assets.versioned(file)

# Methods for applicants
GET     /applicants/:applicantId/edit                                       controllers.applicant.ApplicantInformationController.edit(request: Request, applicantId: Long)
POST    /applicants/:applicantId                                            controllers.applicant.ApplicantInformationController.update(request: Request, applicantId: Long)

# Program methods for applicants
GET     /applicants/:applicantId/programs                                                   controllers.applicant.ApplicantProgramsController.index(request: Request, applicantId: Long)
GET     /applicants/:applicantId/programs/:programId/edit                                   controllers.applicant.ApplicantProgramsController.edit(request: Request, applicantId: Long, programId: Long)
GET     /applicants/:applicantId/programs/:programId/review                                 controllers.applicant.ApplicantProgramReviewController.review(request: Request, applicantId: Long, programId: Long)
POST    /applicants/:applicantId/programs/:programId/submit                                 controllers.applicant.ApplicantProgramReviewController.submit(request: Request, applicantId: Long, programId: Long)
GET     /applicants/:applicantId/programs/:programId/blocks/:blockId/edit                   controllers.applicant.ApplicantProgramBlocksController.edit(request: Request, applicantId: Long, programId: Long, blockId: String)
GET     /applicants/:applicantId/programs/:programId/blocks/:blockId/review                 controllers.applicant.ApplicantProgramBlocksController.review(request: Request, applicantId: Long, programId: Long, blockId: String)
GET     /applicants/:applicantId/programs/:programId/blocks/:blockId/updateFile/:inReview   controllers.applicant.ApplicantProgramBlocksController.updateFile(request: Request, applicantId: Long, programId: Long, blockId: String, inReview: Boolean)
POST    /applicants/:applicantId/programs/:programId/blocks/:blockId/:inReview              controllers.applicant.ApplicantProgramBlocksController.update(request: Request, applicantId: Long, programId: Long, blockId: String, inReview: Boolean)

# User profile pages
GET     /users/me                    controllers.ProfileController.myProfile(request: Request)
GET     /users/:id                   controllers.ProfileController.profilePage(request: Request, id: Long)

# Authentication callback from local auth - nonfederated.  Requires CSRF token.
# Provides client name as url parameter.
GET     /callback                    controllers.CallbackController.callback(request: Request, client_name: String)
POST    /callback                    controllers.CallbackController.callback(request: Request, client_name: String)

# Our federated systems can't provide the mandatory CSRF token, but it's okay - the requests
# are signed by a key, so the requests cannot be forged anyway.
# Provides client name as path parameter.
+nocsrf
GET     /callback/:client_name       controllers.CallbackController.callback(request: Request, client_name: String)
+nocsrf
POST    /callback/:client_name       controllers.CallbackController.callback(request: Request, client_name: String)

# Log into application
GET     /loginForm                   controllers.HomeController.loginForm(request: Request, message: java.util.Optional[String])
GET     /idcsLogin                   controllers.LoginController.idcsLogin(request: Request)
GET     /adfsLogin                   controllers.LoginController.adfsLogin(request: Request)

# Log out of application
GET     /logout                      @org.pac4j.play.LogoutController.logout(request: Request)

# Methods for development: seed the database with test content to develop against, and clear the database
GET     /dev/seed                    controllers.dev.DatabaseSeedController.index(request: Request)
POST    /dev/seed                    controllers.dev.DatabaseSeedController.seed()
POST    /dev/seed/clear              controllers.dev.DatabaseSeedController.clear()

# Methods for development: directly upload file to S3.
# We redirect to create page on success to update our own record in db. Unfortunately this can only be GET.
GET     /dev/fileUpload              controllers.dev.FileUploadController.index(request: Request)
GET     /dev/fileUpload/create       controllers.dev.FileUploadController.create(request: Request)
