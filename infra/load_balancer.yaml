AWSTemplateFormatVersion: '2010-09-09'
Description: 'The public load balancer for Civiform, plus a dummy target that drops traffic while the tool starts up.'
Mappings:
  Certificate:
    prod:
      CertArn: arn:aws:acm:us-west-2:405662711265:certificate/74f32a1f-e8aa-453c-88f1-b2aac0f7e92b
    staging:
      CertArn: arn:aws:acm:us-west-2:405662711265:certificate/e35f35af-6329-4277-8cbf-a8c8a6ab2b40
Parameters:
  VPCId:
    Description: The id of the VPC to add our LB to.
    Type: AWS::EC2::VPC::Id
  PublicSubnet1:
    Description: The public subnet to add the LB to.
    Type: AWS::EC2::Subnet::Id
  PublicSubnet2:
    Description: The public subnet to add the LB to.
    Type: AWS::EC2::Subnet::Id
  LBSecurityGroup:
    Description: The security group to use for our load balancer.
    Type: String
  DomainName:
    Description: The domain name (with or without trailing .).
    Type: String
  HostedZoneId:
    Description: The IDÂ of the (already existing) Route53 hosted zone.
    Type: String
  Environment:
    Type: String
    AllowedValues: ["staging", "prod"]
    Description: "Staging or prod environment"
Resources:
  publiclb:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      IpAddressType: ipv4
      Name: !Join ["-", [!Ref Environment, "civiform-publiclb"]]
      SecurityGroups:
        - !Ref 'LBSecurityGroup'
      Subnets:
        - !Ref 'PublicSubnet1'
        - !Ref 'PublicSubnet2'
  droptraffic:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Name: !Join ["-", [!Ref Environment, "droptraffic"]]
      Port: 80
      VpcId: !Ref 'VPCId'
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  httpredirect:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: redirect
          RedirectConfig:
            Protocol: "HTTPS"
            Port: 443
            Host: "#{host}"
            Path: "/#{path}"
            Query: "#{query}"
            StatusCode: "HTTP_301"
      LoadBalancerArn: !Ref 'publiclb'
      Port: 80
      Protocol: HTTP
  httpslistener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - TargetGroupArn: !Ref 'droptraffic'
          Type: forward
      LoadBalancerArn: !Ref 'publiclb'
      Port: 443
      Protocol: HTTPS
      SslPolicy: ELBSecurityPolicy-TLS-1-2-2017-01
      Certificates:
        - CertificateArn: !FindInMap [Certificate, !Ref Environment, CertArn]
  lbtarget:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      Protocol: HTTP
      Name: !Join ["-", [!Ref Environment, "civiform-lbtarget"]]
      Port: 9000
      VpcId: !Ref 'VPCId'
      TargetType: ip
      HealthCheckPath: /playIndex
      HealthCheckProtocol: HTTP
      HealthCheckIntervalSeconds: 10
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      UnhealthyThresholdCount: 2
  httpslbrule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - TargetGroupArn: !Ref 'lbtarget'
          Type: forward
      Conditions:
        - Field: path-pattern
          PathPatternConfig:
            Values:
              - '*'
      ListenerArn: !Ref 'httpslistener'
      Priority: 1
  dnsrecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneId: !Ref HostedZoneId
      Comment: DNS name for civiform.
      Name: !Ref DomainName
      Type: A
      AliasTarget:
        DNSName: !GetAtt 'publiclb.DNSName'
        HostedZoneId: !GetAtt 'publiclb.CanonicalHostedZoneID'

Outputs:
  LBTarget:
    Description: The target group of the output load balancer
    Value: !Ref 'lbtarget'
    Export:
      Name: !Sub '${AWS::StackName}-LBTarget'
  TGFullName:
    Description: Full name of the load balancer target group.
    Value: !GetAtt 'lbtarget.TargetGroupFullName'
    Export:
      Name: !Sub '${AWS::StackName}-TGFullName'
  LBFullName:
    Description: Full name of the load balancer.
    Value: !GetAtt 'publiclb.LoadBalancerFullName'
    Export:
      Name: !Sub '${AWS::StackName}-LBFullName'
